{"version":3,"sources":["hooks/data/useCompaniesData.js","components/table/header/Header.js","components/table/body/Body.js","components/table/controls/Controls.js","logic/table/tableSorting.js","hooks/table/usePrevious.js","logic/table/checkSort.js","components/table/Table.js","hooks/table/useTableCurrentPage.js","hooks/table/useTableData.js","App.js","serviceWorker.js","index.js"],"names":["useCompaniesData","companiesUrl","incomeUrl","useState","companies","setCompanies","reducer","accumulator","currentValue","parseFloat","value","a","Axios","get","data","dataWithIncome","Promise","all","map","company","id","incomeData","totalIncome","incomes","reduce","avgIncome","length","toFixed","useEffect","getCompanies","then","companiesData","getIncomes","companiesWithIncomeData","catch","err","console","log","Header","props","className","headers","header","index","onClick","setTableSort","key","sortingKey","direction","name","Body","city","Controls","pageChange","currentPage","allPages","type","placeholder","onInput","searchChange","document","getElementById","toLowerCase","defaultValue","onChange","changeItemsNumber","tableSorting","dataToSort","tableSort","sort","b","usePrevious","ref","useRef","current","checkSort","clickedSort","prevTableSort","Table","itemsNumber","setItemsNumber","page","setPage","search","setSearch","maxItems","setCurrentPage","maxPages","Math","ceil","useTableCurrentPage","tableData","setTableData","sortedData","filter","item","includes","String","bottomBound","upperBound","pages","slice","useTableData","event","parseInt","target","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.36540f6b.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nexport function useCompaniesData(companiesUrl, incomeUrl) {\r\n    const [companies, setCompanies] = useState(null);\r\n\r\n    // function for incomes.reduce to get sum of incomes\r\n    const reducer = (accumulator, currentValue) => accumulator + parseFloat(currentValue.value);\r\n\r\n    async function getCompanies() {\r\n        return (await Axios.get(companiesUrl)).data;\r\n    }\r\n\r\n    async function getIncomes(data) {\r\n        const dataWithIncome = data;\r\n\r\n        if (dataWithIncome !== null) {\r\n            await Promise.all(dataWithIncome.map(async (company) => {\r\n                const incomeData = (await Axios.get(incomeUrl + company.id)).data;\r\n\r\n                const totalIncome = incomeData.incomes.reduce(reducer, 0); // 0 -> initial value\r\n                const avgIncome = (totalIncome / incomeData.incomes.length);\r\n\r\n                company.totalIncome = totalIncome.toFixed(2);\r\n                company.avgIncome = avgIncome.toFixed(2);\r\n            }));\r\n        }\r\n\r\n        return dataWithIncome;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCompanies()\r\n            .then(companiesData => getIncomes(companiesData))\r\n            .then(companiesWithIncomeData => setCompanies(companiesWithIncomeData))\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    return companies;\r\n}","import React from \"react\";\r\nimport \"./Header.scss\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <thead>\r\n            <tr className=\"header\">\r\n                {props.headers.map((header, index) =>\r\n                    <th className=\"header-cell center-content\"\r\n                        onClick={() => {\r\n                            props.setTableSort({key: header.sortingKey, direction: 1})\r\n                        }}\r\n                        key={index}>{header.name}\r\n                    </th>)}\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n    setTableSort: PropTypes.func.isRequired,\r\n    headers: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Body.scss\"\r\n\r\nfunction Body(props) {\r\n    return (\r\n        <tbody>\r\n        {props.data.map((company, index) =>\r\n            <tr className=\"table-row\" key={index}>\r\n                <td className=\"table-cell center-content\">{company.id}</td>\r\n                <td className=\"table-cell center-content\">{company.name}</td>\r\n                <td className=\"table-cell center-content\">{company.city}</td>\r\n                <td className=\"table-cell center-content\">{company.totalIncome}</td>\r\n                <td className=\"table-cell center-content\">{company.avgIncome}</td>\r\n            </tr>\r\n        )}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nBody.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Body;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Controls.scss\";\r\n\r\nfunction Controls(props) {\r\n    return (\r\n        <div className=\"controls\">\r\n            <div className=\"buttons\">\r\n                <div>\r\n                    <button className=\"button\" onClick={() => props.pageChange(0)}>\r\n                        <span className=\"button-arrow\">{\"<<\"}</span>\r\n                    </button>\r\n                    <button className=\"button\" onClick={() => props.pageChange(props.currentPage - 1)}>\r\n                        <span className=\"button-arrow\">{\"<\"}</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"current-page\">\r\n                    {props.currentPage + 1} / {props.allPages}\r\n                </div>\r\n                <div>\r\n                    <button className=\"button\" onClick={() => props.pageChange(props.currentPage + 1)}>\r\n                        <span className=\"button-arrow\">{\">\"}</span>\r\n                    </button>\r\n                    <button className=\"button\" onClick={() => props.pageChange(props.allPages)}>\r\n                        <span className=\"button-arrow\">{\">>\"}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"search-and-pages\">\r\n                <input id=\"search\" className=\"search-input\" type=\"text\" placeholder=\"search...\"\r\n                       onInput={() => props.searchChange(document.getElementById(\"search\").value.toLowerCase())} />\r\n                <select defaultValue={10} id=\"itemsNumber\" className=\"items-number\"\r\n                        onChange={props.changeItemsNumber}>\r\n                    <option value={5}>5 per page</option>\r\n                    <option value={10}>10 per page</option>\r\n                    <option value={15}>15 per page</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nControls.propTypes = {\r\n    pageChange: PropTypes.func.isRequired,\r\n    changeItemsNumber: PropTypes.func.isRequired,\r\n    currentPage: PropTypes.number.isRequired,\r\n    allPages: PropTypes.number.isRequired,\r\n    searchChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Controls;\r\n","function tableSorting(dataToSort, tableSort) {\r\n    const sortedData = dataToSort;\r\n\r\n    const compareBy = (sort) => {\r\n        return function (a, b) {\r\n            if (a[sort.key] < b[sort.key]) return (-1 * sort.direction);\r\n            if (a[sort.key] > b[sort.key]) return (1 * sort.direction);\r\n            return 0\r\n        }\r\n    };\r\n\r\n    return sortedData.sort(compareBy(tableSort));\r\n}\r\n\r\nexport default tableSorting;","import {useRef, useEffect} from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n       ref.current = value;\r\n    }, [value]);\r\n\r\n    return ref.current;\r\n}\r\n\r\nexport default usePrevious;","function checkSort(clickedSort, prevTableSort) {\r\n    if (clickedSort.key === prevTableSort.key) {\r\n        return {key: clickedSort.key, direction: -prevTableSort.direction}\r\n    }\r\n\r\n    return clickedSort;\r\n}\r\n\r\nexport default checkSort;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Table.scss\";\r\nimport \"../../global.scss\";\r\n\r\nimport Header from \"./header/Header\";\r\nimport Body from \"./body/Body\";\r\nimport Controls from \"./controls/Controls\";\r\n\r\nimport {useTableData} from \"../../hooks/table/useTableData\";\r\nimport {useTableCurrentPage} from \"../../hooks/table/useTableCurrentPage\";\r\nimport usePrevious from \"../../hooks/table/usePrevious\";\r\n\r\nimport checkSort from \"../../logic/table/checkSort\";\r\n\r\nfunction Table(props) {\r\n    const [tableSort, setTableSort] = useState({key: \"id\", direction: 1});\r\n    const [itemsNumber, setItemsNumber] = useState(10);\r\n    const [page, setPage] = useState(0);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const prevTableSort = usePrevious(tableSort);\r\n    const currentPage = useTableCurrentPage(page, itemsNumber, props.data.length);\r\n    const tableData = useTableData(props.data, currentPage, itemsNumber, tableSort, search);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table className=\"table\">\r\n                <Header headers={props.headers}\r\n                        setTableSort={(clickedSort) => {\r\n                            setTableSort(checkSort(clickedSort, prevTableSort))\r\n                        }}/>\r\n                <Body data={tableData.data} />\r\n            </table>\r\n            <Controls pageChange={setPage}\r\n                      currentPage={currentPage}\r\n                      allPages={tableData.allPages}\r\n                      changeItemsNumber={event => {\r\n                          setItemsNumber(parseInt(event.target.value));\r\n                          setPage(0)\r\n                      }}\r\n                      searchChange={setSearch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nTable.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    headers: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Table;","import {useState, useEffect} from \"react\";\r\n\r\nexport function useTableCurrentPage(page, itemsNumber, maxItems) {\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const maxPages = Math.ceil(maxItems / itemsNumber);\r\n\r\n        if(page < 0)\r\n            setCurrentPage(0);\r\n        else if(page >= maxPages)\r\n            setCurrentPage(maxPages - 1);\r\n        else\r\n            setCurrentPage(page);\r\n    }, [page, itemsNumber, maxItems]);\r\n\r\n    return currentPage;\r\n}","import {useState, useEffect} from \"react\";\r\nimport tableSorting from \"../../logic/table/tableSorting\";\r\n\r\nexport function useTableData(data, currentPage, itemsNumber, tableSort, search) {\r\n    const[tableData, setTableData] = useState({data: [], allPages: 30});\r\n\r\n    useEffect(() => {\r\n        const sortedData = tableSorting(data.filter(item => {\r\n            return item.name.toLowerCase().includes(search) ||\r\n                item.city.toLowerCase().includes(search) ||\r\n                String(item.id).toLowerCase().includes(search) ||\r\n                String(item.totalIncome).toLowerCase().includes(search) ||\r\n                String(item.avgIncome).toLowerCase().includes(search)\r\n        }), tableSort);\r\n\r\n        const bottomBound = currentPage * (itemsNumber);\r\n        const upperBound = (currentPage * itemsNumber) + itemsNumber;\r\n        const pages = Math.ceil(sortedData.length / itemsNumber);\r\n\r\n        setTableData({data: sortedData.slice(bottomBound, upperBound), allPages: pages});\r\n    }, [data, currentPage, itemsNumber, tableSort, search]);\r\n\r\n    return tableData;\r\n}\r\n","import React from 'react';\nimport './App.scss';\n\nimport { useCompaniesData } from './hooks/data/useCompaniesData'\nimport Table from \"./components/table/Table\";\n\nfunction App() {\n  // link to get companies data\n  const companiesUrl = \"https://recruitment.hal.skygate.io/companies\";\n  // concatenate with company id to get company income data\n  const incomeUrl = \"https://recruitment.hal.skygate.io/incomes/\";\n\n  const headers = [\n    {name: \"ID\", sortingKey: \"id\"},\n    {name: \"NAME\", sortingKey: \"name\"},\n    {name: \"CITY\", sortingKey: \"city\"},\n    {name: \"TOTAL INCOME\", sortingKey: \"totalIncome\"},\n    {name: \"AVERAGE INCOME\", sortingKey: \"avgIncome\"}\n  ];\n\n  const data = useCompaniesData(companiesUrl, incomeUrl);\n\n  if (data === null) {\n    return (<div className=\"app\">Loading...</div>);\n  }\n\n  return (\n      <div className=\"app\">\n        <Table data={data}\n               headers={headers}/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}